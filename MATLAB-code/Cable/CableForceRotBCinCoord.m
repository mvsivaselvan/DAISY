function [Fb, Kb, Cb, Mb, Bb] ...
       = CableForceRotBCinCoord(d1, phi1, gamm1, ...
                         d2, phi2, gamm2, ...
                         Pmid, varThetamid, ...
                         P0, ...
                         d1dot, phi1dot, gamm1dot, ...
                         d2dot, phi2dot, gamm2dot, ...
                         Pmiddot, varThetamiddot, ...
                         d1ddot, phi1ddot, gamm1ddot, ...
                         d2ddot, phi2ddot, gamm2ddot, ...
                         Pmidddot, varThetamidddot, ...
                         x01, RJ1, RE1, r1, ...
                         x02, RJ2, RE2, r2, ...
                         R0, II, ...
                         rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                         sg, wg, nel, ...
                         colmat, colmat_brev, colmat_bar, ...
                         d, dbrev, dbar, ...
                         Mbar, ...
                         u, ...
                         Kbar11, Dbar11, dynamic, alph0)
% INPUTS
% d1 = displacement of joint 1 
% phi1 = exponential coordinates of rotation of joint 1
% gamm1 = distance between control points p1 and p2
% d2, phi2, gamm2 - same at end 2 (s=1)
% Pmid = positions of control points 3:(N-2); 3x(N-4) matrix
% varThetamid = twist DOF 2:(Nbrev-1)
% P0 = positions of control points in reference configuration
% d1dot = velocity of end 1
% phi1dot = rate of change of phi1
% gamm1dot = rate of change of gamma1
% d2dot, phi2dot, gamm2dot - same at end 2 (s=1)
% Pmiddot = rate of change of control points 3:(N-2) 
% varThetamiddot = rate of change of twist DOF 2:(Nbrev-1)
% d1ddot ... varThetamidddot = corresponding acceleration terms
% x01 = reference position of joint 1; (3x1) vector
% RJ1 = rotation of joint 1 coordinate frame with respect to global
% RE1 = rotation of cable end 1 with respect to joint 1 coordinate frame
% r1 = position of cable end 1 relative to joint 1 in joint 1 coordinate 
%       system (end offset, 3x1 vector)
% x02, RJ2, RE2, r2 - same at end 2 (s=1) 
% R0 = cell array of orientations in the reference configuration;
%      R0{1} = orientation at end1 (s=0);
%      R0{end} = orientation at end2 (s=1);
%      R0(2:end-1) = orientations at the quadrature points (this is what is
%                    passed to CableForce and CableInertiaForce)
% II = body frame mass moment of inertia (3x3 matrix) per unit length
% Inputs rho ... Dbar11 are same as in the CableForce function
% dynamic = binary argument to define static(0)/dynamic(1) state 
% alph0 = mass-proportional damping coefficient (JB Model)
% OUTPUTS
% Fb = force vector (including INERTIA FORCES) corresponding to the DOF 
%     (d1, phi1, gamm1, d2, phi2, gamm2, Pmid(:), varThetamid)
%     in that order; length of the vector is 3N+Nbrev
% Kb = stiffness matrix Fb_{i,j} with i,j spanning the above DOF
% Cb = damping matrix Fb_{i,jdot}
% Mb = inertia matrix Fb_{i,jddot}
% Bb = derivate of force w.r.t. input

if nargin<57
    alph0 = 0;
end

% Get the control point DOF
qbar1 = [d1; phi1; gamm1];
qbar2 = [d2; phi2; gamm2];
qbar1dot = [d1dot; phi1dot; gamm1dot];
qbar2dot = [d2dot; phi2dot; gamm2dot];
[q1, J1, ~, Qtilde1] = ...
            CableBCTransinCoord(qbar1, x01, RJ1, RE1, r1, R0{1},...
                                qbar1dot, qbar1dot);
[q2, J2, ~, Qtilde2] = ...
            CableBCTransinCoord(qbar2, x02, RJ2, RE2, r2, R0{end},...
                                qbar2dot, qbar2dot);
P = [q1(1:3) q1(4:6) Pmid q2(4:6) q2(1:3)];
varTheta = [q1(end); varThetamid; q2(end)];
N = size(P, 2);
Nbrev = length(varTheta);

% Get the corresponding velocities 
q1dot = J1*qbar1dot;
q2dot = J2*qbar2dot;
Pdot = [q1dot(1:3) q1dot(4:6) Pmiddot q2dot(4:6) q2dot(1:3)];
varThetadot = [q1dot(end); varThetamiddot; q2dot(end)];

% Get the corresponding accelerations (dynamic case)
qbar1ddot = [d1ddot; phi1ddot; gamm1ddot];
qbar2ddot = [d2ddot; phi2ddot; gamm2ddot];
q1ddot = J1*qbar1ddot+Qtilde1*qbar1dot;
q2ddot = J2*qbar2ddot+Qtilde2*qbar2dot;
Pddot = [q1ddot(1:3) q1ddot(4:6) Pmidddot q2ddot(4:6) q2ddot(1:3)];
varThetaddot = [q1ddot(end); varThetamidddot; q2ddot(end)];

% Get forces and stiffness in control point coordinates
if nargout == 1 % only force needed, not stiffness, damping and inertia
    [F, mu] ...
       = CableForce(P, P0, Pdot, varTheta, varThetadot, R0(2:end-1), ...
                    rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                    sg, wg, nel, ...
                    colmat, colmat_brev, colmat_bar, ...
                    d, dbrev, dbar, ...
                    Mbar, ...
                    u, ...
                    Kbar11, Dbar11);
    Fi = zeros(size(F));
    mui = zeros(size(mu));
    if dynamic
        [Fi, mui] ...
            = CableInertiaForce(P, P0, Pdot, Pddot, ...
                                varTheta, varThetadot, varThetaddot, ...
                                R0(2:end-1), ...
                                rho, II, ...
                                sg, wg, nel, ...
                                colmat, colmat_brev, ...
                                d, dbrev, alph0);
    end
else % also get stiffness, damping and inertia
    [F, mu, ...
     F_ij, F_ib, F_ijd, F_ibd, ...
     mu_aj, mu_ab, mu_ajd, mu_abd] ...
       = CableForce(P, P0, Pdot, varTheta, varThetadot, R0(2:end-1), ...
                    rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                    sg, wg, nel, ...
                    colmat, colmat_brev, colmat_bar, ...
                    d, dbrev, dbar, ...
                    Mbar, ...
                    u, ...
                    Kbar11, Dbar11);
    Fi = zeros(size(F));
    mui = zeros(size(mu));
    Kb = [F_ij F_ib; mu_aj mu_ab];
    Cb = [F_ijd F_ibd; mu_ajd mu_abd];
    Mb = zeros(size(Kb));
    if dynamic
        [Fi, mui, ...
        Fi_ij, Fi_ib, Fi_ijd, Fi_ibd, Fi_ijdd, Fi_ibdd, ...
        mui_aj, mui_ab, mui_ajd, mui_abd, mui_ajdd, mui_abdd] ...
            = CableInertiaForce(P, P0, Pdot, Pddot, ...
                                varTheta, varThetadot, varThetaddot, ...
                                R0(2:end-1), ...
                                rho, II, ...
                                sg, wg, nel, ...
                                colmat, colmat_brev, ...
                                d, dbrev, alph0);
        Kb = Kb + [Fi_ij Fi_ib; mui_aj mui_ab];
        Cb = Cb + [Fi_ijd Fi_ibd; mui_ajd mui_abd];
        Mb = Mb + [Fi_ijdd Fi_ibdd; mui_ajdd mui_abdd];
    end
end

F = F + Fi;
mu = mu + mui;
Fb1__ = [F(1:6); mu(1)];
Fb1_ = J1'*Fb1__;
Fb2__ = [F([(3*N-2):3*N (3*N-5):(3*N-3)]); mu(Nbrev)];
Fb2_ = J2'*Fb2__;
Fb = [Fb1_; Fb2_; F(7:(3*N-6)); mu(2:(Nbrev-1))];

% Rearrangement of DOFs in both Force and Stiffness (CableForceRotBC.m)
% are not applied here. If needed, Force vector has to be permuted as
% Fb = Fb([1:6 8:13 7 14:end]);

if nargout > 1 % stiffness, damping and inertia needed
    % Calculate auxiliary terms
    [~, ~, Q1, Qtilde1a] = ...
            CableBCTransinCoord(qbar1, x01, RJ1, RE1, r1, R0{1},...
                                Fb1__, qbar1ddot);
    [~, ~, Q2, Qtilde2a] = ...
            CableBCTransinCoord(qbar2, x02, RJ2, RE2, r2, R0{end},...
                                Fb2__, qbar2ddot);
    [~, ~, ~, ~, C1] = ...
            CableBCTransinCoord(qbar1, x01, RJ1, RE1, r1, R0{1},...
                                Fb1__, qbar1dot, qbar1dot);
    [~, ~, ~, ~, C2] = ...
            CableBCTransinCoord(qbar2, x02, RJ2, RE2, r2, R0{end},...
                                Fb2__, qbar2dot, qbar2dot);
    J = blkdiag(J1,J2); % J = q^i_{ib} 
    Q = blkdiag(Q1,Q2); % Q_{ib,jb} = Fb_i q^i_{ib,jb}
    Qtilde = blkdiag(Qtilde1,Qtilde2); % Qtilde^{i}_{ib} =
                                        % q^i_{ib,jb} qbardot^{jb}
    Qtildea = blkdiag(Qtilde1a,Qtilde2a); % Qtildea^{i}_{ib} 
                                              % = q^i_{ib,jb} qbarddot^{jb}
    C = blkdiag(C1,C2); % C^{i}_{ib} = q^i_{ib,jb,kb}qdot^{jb}qdot^{kb}
    
    % Permute to apply transformation
    permuteK = [1:6 (3*N+1) (3*N-2):3*N (3*N-5):(3*N-3) (3*N+Nbrev) ...
                7:(3*N-6) (3*N+2):(3*N+Nbrev-1)];
            
	% Permute Stiffness, Damping, and Mass matrices 
    Kb = Kb(permuteK,permuteK);
    Cb = Cb(permuteK,permuteK);
    Mb = Mb(permuteK,permuteK);
    
    % Stiffness, Damping and Mass matrices in terms of new DOF
    Kb(:,1:14) = Kb(:,1:14)*J + Cb(:,1:14)*Qtilde + ...
                    Mb(:,1:14)*(Qtildea + C);
    Kb(1:14,:) = J'*Kb(1:14,:);
    Kb(1:14,1:14) = Kb(1:14,1:14) + Q; % add geometric stiffness
    Cb(:,1:14) = Cb(:,1:14)*J + 2*Mb(:,1:14)*Qtilde;
    Cb(1:14,:) = J'*Cb(1:14,:);
    Mb(:,1:14) = Mb(:,1:14)*J;
    Mb(1:14,:) = J'*Mb(1:14,:);
    
end

if nargout > 4 % derivative w.r.t. input needed
    % compute Binp = dF/du
    dFdu = CableForceInputDerivative(P0, rho, wg, nel, colmat, d);
    % dmu/du = 0
    dmudu = zeros(length(mu),3);
    % Now transform each column of this matrix in the same way as F and mu
    Bb1__ = [dFdu(1:6,:); dmudu(1,:)];
    Bb1_ = J1'*Bb1__;
    Bb2__ = [dFdu([(3*N-2):3*N (3*N-5):(3*N-3)],:); dmudu(Nbrev,:)];
    Bb2_ = J2'*Bb2__;
    Bb = [Bb1_; Bb2_; dFdu(7:(3*N-6),:); dmudu(2:(Nbrev-1),:)];
end
