%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% STATIC ANALYSIS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
addpath ..
%% STEP 1
%-------------------------------
% Surge Arrester (SA)
%-------------------------------
% Surge Arrester (SA) parameters
I3 = eye(3);
h_SA = 92.25; % in 
hc_SA = 55; % in 
m_SA = 0.411; % lb-s^2/in
II_SA = [1370 0.0105*1370 0; 0.0105*1370 1350 0; 0 0 1]; % lb-s^2/in in^2
kz_SA = 1; % lb-in % (Translation in z direction is fixed, so that is why 
                   %  kz and IIz are replaced with 1, they are not used!)
krx_SA = 2590000; % lb-in/rad
kry_SA = 2560000; % lb-in/rad
KT_SA = [1 0 0; 0 1 0; 0  0 kz_SA];
KR_SA = [krx_SA 0 0; 0 kry_SA 0; 0 0 1];
zetav_SA = 0.006; % damping ratio for vertical motion
zetar_SA = 0.004; % damping ratio for rocking motion
CT_SA = zetav_SA*2*sqrt(kz_SA*m_SA)*I3;
CR_SA = zetar_SA*2*sqrt(KR_SA*II_SA);
g = 386.4; % in/s^2
dirg = [0, 0, -1];

% undeformed state of Surge Arrester (SA)
d0_SA = zeros(3,1);
[phi10_SA, phi20_SA, phi30_SA] = deal(0,0,0);
dd_SA = zeros(3,1);
phid_SA = zeros(3,1);
ddd_SA = zeros(3,1);
phidd_SA = zeros(3,1);
r_SA = [0; 0; hc_SA];
RJ_SA = I3;
x0_SA = zeros(3,1);
x0Top_SA = x0_SA + [0; 0; h_SA];

% Try one step of static analysis:
fprintf('Static analysis of surge arrester ...\n')
% line search parameters (see page 33 of Nocedal and Wright)
armijo_gamm = 0.9;
armijo_c1 = 1e-2;
% Newton iterations
x = [phi10_SA; phi20_SA];
for k = 1:200 
    phi1k_SA = x(1);
    phi2k_SA = x(2);
    [F_SA, K_SA] = ...
        RigidBodyForce(d0_SA, [phi1k_SA; phi2k_SA; phi30_SA], ...
                       dd_SA, phid_SA, ddd_SA, phidd_SA, ...
                       m_SA, II_SA, KT_SA, CT_SA, KR_SA, CR_SA, r_SA, ...
                       RJ_SA, g*dirg(:));
    gk = F_SA(4:5);
    if (norm(gk) <= 1e-8)
        break;
    end
    D1g = K_SA(4:5, 4:5);
    Dx = -D1g\gk;
    armijo_alph = 1;
    for l = 1:50
        x_ = x + armijo_alph*Dx;
        phi1_SA_ = x_(1);
        phi2_SA_ = x_(2);
        F_SA_ = ...
        RigidBodyForce(d0_SA, [phi1_SA_; phi2_SA_; phi30_SA], ...
                       dd_SA, phid_SA, ddd_SA, phidd_SA, ...
                       m_SA, II_SA, KT_SA, CT_SA, KR_SA, CR_SA, r_SA, ...
                       RJ_SA, g*dirg(:));
        gk_ = F_SA_(4:5);
        if (0.5*norm(gk_)^2 <= (0.5 - armijo_alph*armijo_c1)*norm(gk)^2)
            break;
        end
        armijo_alph = armijo_alph*armijo_gamm;
    end
    x = x_;
    fprintf('k = %d, ||g|| = %g, ||Dx|| = %g, armijo_alph = %g\n', ...
             k, norm(gk), norm(Dx), armijo_alph);
end

% deformed state of Surge Arrester (SA)
d_SA = d0_SA;
phi_SA = [phi1k_SA; phi2k_SA; phi30_SA];
xCM_SA = x0_SA + RJ_SA*(d_SA + expm(hat(phi_SA))*r_SA);
xTop_SA = xCM_SA + [0; 0; -hc_SA + h_SA]; 
fprintf('Top coordinate of SA is [%g;%g;%g] \n', xTop_SA)

%% STEP 2
%-------------------------------
% Bushing (B)
%-------------------------------
% Bushing parameters (w/ stiffener)
h_B = 91; % in 
hc_B = 20; % in 
m_B = 2.41; % lb-s^2/in
II_B = [4190 0.003*4190 0.003*4190; 0.003*4190 4010 0.003*4190; ...
        0.003*4190 0.003*4190 1]; % lb-s^2/in in^2
kz_B = 39900; % lb/in
krx_B = 7530000; % lb-in/rad
kry_B = 5600000; % lb-in/rad
KT_B = [1 0 0; 0 1 0; 0 0 kz_B];
KR_B = [krx_B 0 0; 0 kry_B 0; 0 0 1];
zetav_B = 0.004; % damping ratio for vertical motion
zetar_B = 0.008; % damping ratio for rocking motion
CT_B = zetav_B*2*sqrt(kz_B*m_B)*I3;
CR_B = zetar_B*2*sqrt(KR_B*II_B);

% undeformed state of Bushing
[d10_B, d20_B, d30_B] = deal(0,0,0);
[phi10_B, phi20_B, phi30_B] = deal(0,0,0);
dd_B = zeros(3,1);
phid_B = zeros(3,1);
ddd_B = zeros(3,1);
phidd_B = zeros(3,1);
r_B = [0; 0; hc_B];
RJ_B = I3;
span = 125; % span (in) (from driverTemplate2.m)
x0_B = x0_SA + [span; 0; 0];
x0Top_B = x0_B + [0; 0; h_B];

% Try one step of static analysis:
fprintf('Static analysis of bushing ...\n')
% Newton iterations
x = [d30_B; phi10_B; phi20_B];
for k = 1:200 
    d3k_B = x(1);
    phi1k_B = x(2);
    phi2k_B = x(3);
    [F_B, K_B] = ...
        RigidBodyForce([d10_B; d20_B; d3k_B], ...
                       [phi1k_B; phi2k_B; phi30_B], ...
                       dd_B, phid_B, ddd_B, phidd_B, ...
                       m_B, II_B, KT_B, CT_B, KR_B, CR_B, r_B, ...
                       RJ_B, g*dirg(:));
    gk = F_B(3:5);
    if (norm(gk) <= 1e-8)
        break;
    end
    D1g = K_B(3:5, 3:5);
    Dx = -D1g\gk;
    armijo_alph = 1;
    for l = 1:50
        x_ = x + armijo_alph*Dx;
        d3_B_ =x_(1);
        phi1_B_ = x_(2);
        phi2_B_ = x_(3);
        F_B_ = ...
        RigidBodyForce([d10_B; d20_B; d3_B_], ...
                       [phi1_B_; phi2_B_; phi30_B], ...
                       dd_B, phid_B, ddd_B, phidd_B, ...
                       m_B, II_B, KT_B, CT_B, KR_B, CR_B, r_B, ...
                       RJ_B, g*dirg(:));
        gk_ = F_B_(3:5);
        if (0.5*norm(gk_)^2 <= (0.5 - armijo_alph*armijo_c1)*norm(gk)^2)
            break;
        end
        armijo_alph = armijo_alph*armijo_gamm;
    end
    x = x_;
    fprintf('k = %d, ||g|| = %g, ||Dx|| = %g, armijo_alph = %g\n', ...
             k, norm(gk), norm(Dx), armijo_alph);
end

% deformed state of Bushing
d_B = [d10_B; d20_B; d3k_B];
phi_B = [phi1k_B; phi2k_B; phi30_B];
xCM_B = x0_B + RJ_B*(d_B + expm(hat(phi_B))*r_B);
xTop_B = xCM_B + [0; 0; -hc_B + h_B]; 
fprintf('Top coordinate of bushing is [%g;%g;%g] \n', xTop_B)

%% STEP 3
%-------------------------------
% Conductor (C) (driverTemplate2.m)
%-------------------------------

% Spline setup
N = 10; % number of control points
d = 3; % cubic spline
dbrev = 2;
dbar = d - 2;
Ng = 3; % number of Gauss points per element
[sg, wg, nel, knots, colmat, colmat_brev, colmat_bar] ...
    = CableSplineSetup(N, d, dbrev, dbar, Ng);
Nbrev = size(colmat_brev,2);

% Reference geometry - cicular arc
slack = 2; % in
% span = 125; % in (previously defined in STEP 2)
L = span + slack; % length
curvangle = pi/3;
R = L/curvangle; % want a 60-degree arc
curve_gamm = @(s)myCircle(s,R,-pi/2-curvangle/2,-pi/2+curvangle/2);
refGeom = curve_gamm(linspace(0,1,101));
[gamm_, J_] = piecewiseLinearCurve(refGeom',[0;sg;1]);
[P0, ~] = SplineApproximation(gamm_, J_, N, sg, wg, colmat);
P0 = P0 - P0(:,1); % translate start end to origin
R0 = getBishopFrame(P0, knots, d, [0; sg; 1]);

% Conductor properties
Acable = 1.57; % in^2
density = 2.54e-4; % (lb-s^2/in)/in^3
Ecable = 1e7; % psi
Icable = 2.18e-3; % in^4
rho = density*Acable;
EI = Ecable*Icable;
EA = Ecable*Acable;
GJ = (2*EI)/(2*(1+0.3)); % I is Imin, i.e., wire-wise, so J = 2*I;
                         % and G = E/2/(1+nu), taking nu = 0.3
betBEND = 0.01; % damping coefficient for bending
betAX = 0.01; % damping coefficient for axial
betTOR = 0.01; % damping coefficient for torsion

II_C = density*(Acable/pi)^2/64*diag([1 1 2]);

% Mbar, Kbar11, Dbar11
[Mbar, Kbar11, Dbar11] ...
     = CableMbar(P0, EA, betAX, colmat, colmat_bar, wg);

% undeformed state of Conductor
x01_C = x0Top_SA; r1_C = zeros(3,1); 
RE1_C = I3;
Rb10 = R0(:,1:3);
gamma10 = norm(P0(:,2)-P0(:,1));
x02_C = x0Top_B; r2_C = zeros(3,1);
RE2_C = I3;
Rb20 = R0(:,(length(sg)+1)*3+(1:3));
gamma20 = -norm(P0(:,end)-P0(:,end-1));
Pmid0 = P0(:,3:end-2);
varTheta0 = zeros(size(colmat_brev,2),1);
varThetamid0 = varTheta0(2:end-1);
gamma1dot = 0;
gamma2dot = 0;
Pmiddot = zeros(size(Pmid0));
varThetamiddot = zeros(size(varThetamid0));
gamma1ddot = 0;
gamma2ddot = 0;
Pmidddot = zeros(size(Pmid0));
varThetamidddot = zeros(size(varThetamid0));
[uXt, uYt, uZt] = deal(0,0,0);
u = g*dirg(:) + [uXt; uYt; uZt]; 
dynamic = 0;

% Try one step of static analysis
fprintf('Static analysis of conductor ...\n')
% Rotate the two ends to horizontal and adjust end positions to structures
% Newton iterations
x = [gamma10; gamma20; Pmid0(:); varThetamid0];
for k = 1:200 
    gamma1k = x(1);
    gamma2k = x(2);
    Pmidk = reshape(x(3:2+3*(N-4)),3,N-4);
    varThetamidk = x(3+3*(N-4):end);
    [F_C, K_C] ...
      = CableForceRotBCinCoord(d_SA, phi_SA, gamma1k, ...
                               d_B, phi_B, gamma2k, ...
                               Pmidk, varThetamidk, ...
                               P0, ...
                               dd_SA, phid_SA, gamma1dot, ...
                               dd_B, phid_B, gamma2dot, ...
                               Pmiddot, varThetamiddot, ...
                               ddd_SA, phidd_SA, gamma1ddot, ...
                               ddd_B, phidd_B, gamma2ddot, ...
                               Pmidddot, varThetamidddot, ...
                               x01_C, RJ_SA, RE1_C, r1_C, ...
                               x02_C, RJ_B, RE2_C, r2_C, ...
                               R0, II_C, ...
                               rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                               sg, wg, nel, ...
                               colmat, colmat_brev, colmat_bar, ...
                               d, dbrev, dbar, ...
                               Mbar, ...
                               u, ...
                               Kbar11, Dbar11, dynamic);
    gk = [F_C(7); F_C(14:end)];
    if (norm(gk) <= 1e-8)
        break;
    end
    D1g = K_C([7 14:end], [7 14:end]);
    Dx = -D1g\gk;
    armijo_alph = 1;
    for l = 1:50
        x_ = x + armijo_alph*Dx;
        gamma1_ = x_(1);
        gamma2_ = x_(2);
        Pmid_ = reshape(x_(3:2+3*(N-4)),3,N-4);
        varThetamid_ = x_(3+3*(N-4):end);
        F_C_ = CableForceRotBCinCoord(d_SA, phi_SA, gamma1_, ...
                               d_B, phi_B, gamma2_, ...
                               Pmid_, varThetamid_, ...
                               P0, ...
                               dd_SA, phid_SA, gamma1dot, ...
                               dd_B, phid_B, gamma2dot, ...
                               Pmiddot, varThetamiddot, ...
                               ddd_SA, phidd_SA, gamma1ddot, ...
                               ddd_B, phidd_B, gamma2ddot, ...
                               Pmidddot, varThetamidddot, ...
                               x01_C, RJ_SA, RE1_C, r1_C, ...
                               x02_C, RJ_B, RE2_C, r2_C, ...
                               R0, II_C, ...
                               rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                               sg, wg, nel, ...
                               colmat, colmat_brev, colmat_bar, ...
                               d, dbrev, dbar, ...
                               Mbar, ...
                               u, ...
                               Kbar11, Dbar11, dynamic);
        gk_ = [F_C_(7); F_C_(14:end)];
        if (0.5*norm(gk_)^2 <= (0.5 - armijo_alph*armijo_c1)*norm(gk)^2)
            break;
        end
        armijo_alph = armijo_alph*armijo_gamm;
    end
    x = x_;
    fprintf('k = %d, ||g|| = %g, ||Dx|| = %g, armijo_alph = %g\n', ...
             k, norm(gk), norm(Dx), armijo_alph);
end

% deformed state of Conductor
gamma1 = gamma1k;
gamma2 = gamma2k;
Pmid = Pmidk;
varThetamid = varThetamidk;
eta = zeros(3,1);
rho1 = zeros(3,1);
rho2 = zeros(3,1);
qbar1 = [d_SA; phi_SA; gamma1];
qbar2 = [d_B; phi_B; gamma2];
q1 = CableBCTransinCoord(qbar1, ...
                         x01_C, RJ_SA, RE1_C, r1_C, Rb10, ...
                         eta, rho1, rho2);
q2 = CableBCTransinCoord(qbar2, ...
                         x02_C, RJ_B, RE2_C, r2_C, Rb20, ...
                         eta, rho1, rho2);
P = [q1(1:3) q1(4:6) Pmid q2(4:6) q2(1:3)];

bb0 = spmak(knots,P0);
bb = spmak(knots,P);
figure(101),
    fnplt(bb0),
    hold on,
    fnplt(bb),
    grid on,
    axis equal,
    view([0,-1,0]),
    xlabel('X position (in)')
    zlabel('Z position (in)')
    legend('Reference','Step 3 (structures top)')
    title('Adjust conductor to structures top ends')
        
%% STEP 4
%-------------------------------
% Introduce Rigid Offsets
%-------------------------------
% current state of Conductor using rigid offsets
x01_C = x0_SA; r1_C = x0Top_SA - x0_SA;
x02_C = x0_B; r2_C = x0Top_B - x0_B;
% only rigid offsets are introduced here and the remaining variables for 
% CableForceRotBCinCoord are the same 

% Try one step of static analysis
fprintf('Static analysis of conductor using rigid offsets ...\n')
% Newton iterations
x = [gamma1; gamma2; Pmid(:); varThetamid];
for k = 1:200 
    gamma1k = x(1);
    gamma2k = x(2);
    Pmidk = reshape(x(3:2+3*(N-4)),3,N-4);
    varThetamidk = x(3+3*(N-4):end);
    [F_C, K_C] ...
      = CableForceRotBCinCoord(d_SA, phi_SA, gamma1k, ...
                               d_B, phi_B, gamma2k, ...
                               Pmidk, varThetamidk, ...
                               P0, ...
                               dd_SA, phid_SA, gamma1dot, ...
                               dd_B, phid_B, gamma2dot, ...
                               Pmiddot, varThetamiddot, ...
                               ddd_SA, phidd_SA, gamma1ddot, ...
                               ddd_B, phidd_B, gamma2ddot, ...
                               Pmidddot, varThetamidddot, ...
                               x01_C, RJ_SA, RE1_C, r1_C, ...
                               x02_C, RJ_B, RE2_C, r2_C, ...
                               R0, II_C, ...
                               rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                               sg, wg, nel, ...
                               colmat, colmat_brev, colmat_bar, ...
                               d, dbrev, dbar, ...
                               Mbar, ...
                               u, ...
                               Kbar11, Dbar11, dynamic);
    gk = [F_C(7); F_C(14:end)];
    if (norm(gk) <= 1e-8)
        break;
    end
    D1g = K_C([7 14:end], [7 14:end]);
    Dx = -D1g\gk;
    armijo_alph = 1;
    for l = 1:50
        x_ = x + armijo_alph*Dx;
        gamma1_ = x_(1);
        gamma2_ = x_(2);
        Pmid_ = reshape(x_(3:2+3*(N-4)),3,N-4);
        varThetamid_ = x_(3+3*(N-4):end);
        F_C_ = CableForceRotBCinCoord(d_SA, phi_SA, gamma1_, ...
                               d_B, phi_B, gamma2_, ...
                               Pmid_, varThetamid_, ...
                               P0, ...
                               dd_SA, phid_SA, gamma1dot, ...
                               dd_B, phid_B, gamma2dot, ...
                               Pmiddot, varThetamiddot, ...
                               ddd_SA, phidd_SA, gamma1ddot, ...
                               ddd_B, phidd_B, gamma2ddot, ...
                               Pmidddot, varThetamidddot, ...
                               x01_C, RJ_SA, RE1_C, r1_C, ...
                               x02_C, RJ_B, RE2_C, r2_C, ...
                               R0, II_C, ...
                               rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                               sg, wg, nel, ...
                               colmat, colmat_brev, colmat_bar, ...
                               d, dbrev, dbar, ...
                               Mbar, ...
                               u, ...
                               Kbar11, Dbar11, dynamic);
        gk_ = [F_C_(7); F_C_(14:end)];
        if (0.5*norm(gk_)^2 <= (0.5 - armijo_alph*armijo_c1)*norm(gk)^2)
            break;
        end
        armijo_alph = armijo_alph*armijo_gamm;
    end
    x = x_;
    fprintf('k = %d, ||g|| = %g, ||Dx|| = %g, armijo_alph = %g\n', ...
             k, norm(gk), norm(Dx), armijo_alph);
end

% deformed state of Conductor using rigid offsets
gamma1 = gamma1k;
gamma2 = gamma2k;
Pmid = Pmidk;
varThetamid = varThetamidk;
qbar1 = [d_SA; phi_SA; gamma1];
qbar2 = [d_B; phi_B; gamma2];
q1 = CableBCTransinCoord(qbar1, ...
                         x01_C, RJ_SA, RE1_C, r1_C, Rb10, ...
                         eta, rho1, rho2);
q2 = CableBCTransinCoord(qbar2, ...
                         x02_C, RJ_B, RE2_C, r2_C, Rb20, ...
                         eta, rho1, rho2);
P = [q1(1:3) q1(4:6) Pmid q2(4:6) q2(1:3)];

bb_rigid = spmak(knots,P);
figure(101),
    fnplt(bb_rigid),
    hold off,
    legend('Reference','Step 3 (structures top)',...
            'Step 4 (rigid offsets included)')
        
%% STEPS 5 & 6
%-------------------------------
% Connected Structure
%-------------------------------
SADOFnum = [0 0 0 1 2 0];
BDOFnum = [0 0 3 4 5 0];
CDOFnum = [0 0 0 1 2 0 6 0 0 3 4 5 0 7 8:3*N-12+Nbrev-2+7];
% assembly parameters
maskSADof = SADOFnum(:) > 0;
indexSADof = SADOFnum(maskSADof);
maskBDof = BDOFnum(:) > 0;
indexBDof = BDOFnum(maskBDof);
maskCDof = CDOFnum(:) > 0;
indexCDof = CDOFnum(maskCDof);

% current state of Surge Arrester (SA), Bushing (B) and Conductor (C):
% all variables are obtained from previous steps

% Try one step of static analysis:
fprintf('Static analysis of connected structure ...\n')
% Newton iterations
x = [phi_SA(1); phi_SA(2); d_B(3); phi_B(1); phi_B(2); ...
     gamma1; gamma2; Pmid(:); varThetamid];
for k = 1:200
    phi1k_SA = x(1);
    phi2k_SA = x(2);
    d3k_B = x(3);
    phi1k_B = x(4);
    phi2k_B = x(5);
    gamma1k = x(6);
    gamma2k = x(7);
    Pmidk = reshape(x(8:7+3*(N-4)),3,N-4);
    varThetamidk = x(8+3*(N-4):end);
    %%%%%%%%%%%% (in-line function Template2StructureForce.m) %%%%%%%%%%%%%
    % Calculation of unbalanced force and stiffness matrix
    F = zeros(3*N-12+Nbrev-2+7,1);
    K = zeros(3*N-12+Nbrev-2+7);
    [F_SA, K_SA] = ...
        RigidBodyForce(d_SA, [phi1k_SA; phi2k_SA; phi30_SA], ...
                       dd_SA, phid_SA, ddd_SA, phidd_SA, ...
                       m_SA, II_SA, KT_SA, CT_SA, KR_SA, CR_SA, r_SA, ...
                       RJ_SA, u);
    [F_B, K_B] = ...
        RigidBodyForce([d10_B; d20_B; d3k_B], ...
                       [phi1k_B; phi2k_B; phi30_B], ...
                       dd_B, phid_B, ddd_B, phidd_B, ...
                       m_B, II_B, KT_B, CT_B, KR_B, CR_B, r_B, ...
                       RJ_B, u);
    [F_C, K_C] ...
      = CableForceRotBCinCoord(d_SA, [phi1k_SA; phi2k_SA; phi30_SA], ...
                               gamma1k, ...
                               [d10_B; d20_B; d3k_B], ...
                               [phi1k_B; phi2k_B; phi30_B], ...
                               gamma2k, ...
                               Pmidk, varThetamidk, ...
                               P0, ...
                               dd_SA, phid_SA, gamma1dot, ...
                               dd_B, phid_B, gamma2dot, ...
                               Pmiddot, varThetamiddot, ...
                               ddd_SA, phidd_SA, gamma1ddot, ...
                               ddd_B, phidd_B, gamma2ddot, ...
                               Pmidddot, varThetamidddot, ...
                               x01_C, RJ_SA, RE1_C, r1_C, ...
                               x02_C, RJ_B, RE2_C, r2_C, ...
                               R0, II_C, ...
                               rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                               sg, wg, nel, ...
                               colmat, colmat_brev, colmat_bar, ...
                               d, dbrev, dbar, ...
                               Mbar, ...
                               u, ...
                               Kbar11, Dbar11, dynamic);
    % Assembly of unbalanced force and stiffness matrix
    F(indexSADof) = F(indexSADof) + F_SA(maskSADof); 
    K(indexSADof,indexSADof) = K(indexSADof,indexSADof) + ...
                                K_SA(maskSADof,maskSADof);
    F(indexBDof) = F(indexBDof) + F_B(maskBDof); 
    K(indexBDof,indexBDof) = K(indexBDof,indexBDof) + ...
                                K_B(maskBDof,maskBDof);
    F(indexCDof) = F(indexCDof) + F_C(maskCDof); 
    K(indexCDof,indexCDof) = K(indexCDof,indexCDof) + ...
                                K_C(maskCDof,maskCDof);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    gk = F;
    if (norm(gk) <= 1e-7)
        break;
    end
    D1g = K;
    Dx = -D1g\gk;
    armijo_alph = 1;
    for l = 1:50
        x_ = x + armijo_alph*Dx;
        phi1_SA_ = x_(1);
        phi2_SA_ = x_(2);
        d3_B_ = x_(3);
        phi1_B_ = x_(4);
        phi2_B_ = x_(5);
        gamma1_ = x_(6);
        gamma2_ = x_(7);
        Pmid_ = reshape(x_(8:7+3*(N-4)),3,N-4);
        varThetamid_ = x_(8+3*(N-4):end);
        %%%%%%%%%%%% (in-line function Template2StructureForce.m) %%%%%%%%%
        % Calculation of unbalanced force
        F_ = zeros(3*N-12+Nbrev-2+7,1);
        F_SA_ = ...
        RigidBodyForce(d_SA, [phi1_SA_; phi2_SA_; phi30_SA], ...
                       dd_SA, phid_SA, ddd_SA, phidd_SA, ...
                       m_SA, II_SA, KT_SA, CT_SA, KR_SA, CR_SA, r_SA, ...
                       RJ_SA, u);
        F_B_ = ...
        RigidBodyForce([d10_B; d20_B; d3_B_], ...
                       [phi1_B_; phi2_B_; phi30_B], ...
                       dd_B, phid_B, ddd_B, phidd_B, ...
                       m_B, II_B, KT_B, CT_B, KR_B, CR_B, r_B, ...
                       RJ_B, u);
        F_C_ = ...
        CableForceRotBCinCoord(d_SA, [phi1_SA_; phi2_SA_; phi30_SA], ...
                               gamma1_, ...
                               [d10_B; d20_B; d3_B_], ...
                               [phi1_B_; phi2_B_; phi30_B], ...
                               gamma2_, ...
                               Pmid_, varThetamid_, ...
                               P0, ...
                               dd_SA, phid_SA, gamma1dot, ...
                               dd_B, phid_B, gamma2dot, ...
                               Pmiddot, varThetamiddot, ...
                               ddd_SA, phidd_SA, gamma1ddot, ...
                               ddd_B, phidd_B, gamma2ddot, ...
                               Pmidddot, varThetamidddot, ...
                               x01_C, RJ_SA, RE1_C, r1_C, ...
                               x02_C, RJ_B, RE2_C, r2_C, ...
                               R0, II_C, ...
                               rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                               sg, wg, nel, ...
                               colmat, colmat_brev, colmat_bar, ...
                               d, dbrev, dbar, ...
                               Mbar, ...
                               u, ...
                               Kbar11, Dbar11, dynamic);
        % Assembly of unbalanced force
        F_(indexSADof) = F_(indexSADof) + F_SA_(maskSADof);
        F_(indexBDof) = F_(indexBDof) + F_B_(maskBDof); 
        F_(indexCDof) = F_(indexCDof) + F_C_(maskCDof); 
        %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        gk_ = F_;
        if (0.5*norm(gk_)^2 <= (0.5 - armijo_alph*armijo_c1)*norm(gk)^2)
            break;
        end
        armijo_alph = armijo_alph*armijo_gamm;
    end
    x = x_;
    fprintf('k = %d, ||g|| = %g, ||Dx|| = %g, armijo_alph = %g, l = %d\n', ...
             k, norm(gk), norm(Dx), armijo_alph, l);
end

% deformed state of connected structure
phi_SA = [phi1k_SA; phi2k_SA; phi30_SA];
d_B = [d10_B; d20_B; d3k_B];
phi_B = [phi1k_B; phi2k_B; phi30_B];
gamma1 = gamma1k;
gamma2 = gamma2k;
Pmid = Pmidk;
varThetamid = varThetamidk;
qbar1 = [d_SA; phi_SA; gamma1];
qbar2 = [d_B; phi_B; gamma2];
q1 = CableBCTransinCoord(qbar1, ...
                         x01_C, RJ_SA, RE1_C, r1_C, Rb10, ...
                         eta, rho1, rho2);
q2 = CableBCTransinCoord(qbar2, ...
                         x02_C, RJ_B, RE2_C, r2_C, Rb20, ...
                         eta, rho1, rho2);
P_connected = [q1(1:3) q1(4:6) Pmid q2(4:6) q2(1:3)];

bb_connected = spmak(knots,P_connected);
figure(102),
    fnplt(bb),
    hold on,
    fnplt(bb_connected),
    grid on,
    view([0,-1,0]),
    xlabel('X position (in)')
    zlabel('Z position (in)')
    legend('Step 3 or 4 (structures top)', 'Step 6 (connected structures)')
    title('Deformed shape of connected structures')

%% Linearization
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Get linearization at the equilibrium state (before starting nonlinear 
% dynamic analysis)
dynamic = 1;

[~, KSA0, CSA0, MSA0, BSA0] = ...
        RigidBodyForce(d_SA, phi_SA, ...
                       dd_SA, phid_SA, ddd_SA, phidd_SA, ...
                       m_SA, II_SA, KT_SA, CT_SA, KR_SA, CR_SA, r_SA, ...
                       RJ_SA, u);
[~, KB0, CB0, MB0, BB0] = ...
        RigidBodyForce(d_B, phi_B, ...
                       dd_B, phid_B, ddd_B, phidd_B, ...
                       m_B, II_B, KT_B, CT_B, KR_B, CR_B, r_B, ...
                       RJ_B, u);

[~, KC0, CC0, MC0, BC0] ...
       = CableForceRotBCinCoord(d_SA, phi_SA, gamma1, ...
                         d_B, phi_B, gamma2, ...
                         Pmid, varThetamid, ...
                         P0, ...
                         dd_SA, phid_SA, gamma1dot, ...
                         dd_B, phid_B, gamma2dot, ...
                         Pmiddot, varThetamiddot, ...
                         ddd_SA, phidd_SA, gamma1ddot, ...
                         ddd_B, phidd_B, gamma2ddot, ...
                         Pmidddot, varThetamidddot, ...
                         x01_C, RJ_SA, RE1_C, r1_C, ...
                         x02_C, RJ_B, RE2_C, r2_C, ...
                         R0, II_C, ...
                         rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                         sg, wg, nel, ...
                         colmat, colmat_brev, colmat_bar, ...
                         d, dbrev, dbar, ...
                         Mbar, ...
                         u, ...
                         Kbar11, Dbar11, dynamic,0);
K0 = zeros(3*N-12+Nbrev-2+7);
C0 = zeros(3*N-12+Nbrev-2+7);
M0 = zeros(3*N-12+Nbrev-2+7);
B0 = zeros(3*N-12+Nbrev-2+7,3);
K0(indexSADof,indexSADof) = K0(indexSADof,indexSADof) + ...
                                KSA0(maskSADof,maskSADof);
K0(indexBDof,indexBDof) = K0(indexBDof,indexBDof) + ...
                                KB0(maskBDof,maskBDof);
K0(indexCDof,indexCDof) = K0(indexCDof,indexCDof) + ...
                                KC0(maskCDof,maskCDof);
C0(indexSADof,indexSADof) = C0(indexSADof,indexSADof) + ...
                                CSA0(maskSADof,maskSADof);
C0(indexBDof,indexBDof) = C0(indexBDof,indexBDof) + ...
                                CB0(maskBDof,maskBDof);
C0(indexCDof,indexCDof) = C0(indexCDof,indexCDof) + ...
                                CC0(maskCDof,maskCDof);
M0(indexSADof,indexSADof) = M0(indexSADof,indexSADof) + ...
                                MSA0(maskSADof,maskSADof);
M0(indexBDof,indexBDof) = M0(indexBDof,indexBDof) + ...
                                MB0(maskBDof,maskBDof);
M0(indexCDof,indexCDof) = M0(indexCDof,indexCDof) + ...
                                MC0(maskCDof,maskCDof);
B0(indexSADof,:) = B0(indexSADof,:) + BSA0(maskSADof,:);
B0(indexBDof,:) = B0(indexBDof,:) + BB0(maskBDof,:);
B0(indexCDof,:) = B0(indexCDof,:) + BC0(maskCDof,:);

% save info needed to plot mode shapes
X0 = [phi_SA(1:2);d_B(3);phi_B(1:2);gamma1;gamma2;Pmid(:);varThetamid];
X0 = [X0; zeros(size(X0))];

AA = [zeros(size(M0)) eye(size(M0)); -M0\K0 -M0\C0];
BB = [zeros(size(M0,1),3); -M0\B0];
CC = eye(length(X0)); % get all the states as outputs
DD = [];

save linearization d_SA phi_SA ...
                   dd_SA phid_SA ...
                   d_B phi_B ...
                   dd_B phid_B ...
                   RJ_SA RJ_B ...
                   x01_C RE1_C r1_C ...
                   x02_C RE2_C r2_C ...
                   Rb10 Rb20 ...
                   R0 N Nbrev ...
                   maskSADof maskBDof ...
                   indexSADof indexBDof ...
                   knots X0 x0_SA x0_B AA BB CC DD

% End computing linearization
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DYNAMIC ANALYSIS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
dynamic = 1;
scle = 1.0;
eqdata = load('../../../IDAFortranTest/eqdata.dat');
uXt = eqdata(:,1)*g*scle;
uYt = eqdata(:,2)*g*scle; 
uZt = eqdata(:,3)*g*scle; 
                      
dtsample = 1/256;
tspan = [0:dtsample:50];
fprintf('Nonlinear dynamic analysis of connected structure ...\n');
tic
[T, X, Xp] = ...
    SolveTemplate2StructureDynamics(d_SA, phi_SA, ...
                        dd_SA, phid_SA, ddd_SA, phidd_SA, ...
                        d_B, phi_B, ...
                        dd_B, phid_B, ddd_B, phidd_B, ...
                        gamma1, gamma2, ...
                        Pmid, varThetamid, ...
                        gamma1dot, gamma2dot, ...
                        Pmiddot, varThetamiddot, ...
                        gamma1ddot, gamma2ddot, ...
                        Pmidddot, varThetamidddot, ...
                        m_SA, II_SA, KT_SA, CT_SA, KR_SA, CR_SA, r_SA, ...
                        RJ_SA, ...
                        m_B, II_B, KT_B, CT_B, KR_B, CR_B, r_B, ...
                        RJ_B, ...
                        P0, ...
                        x01_C, RE1_C, r1_C, ...
                        x02_C, RE2_C, r2_C, ...
                        R0, II_C, ...
                        rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                        sg, wg, nel, ...
                        colmat, colmat_brev, colmat_bar, ...
                        d, dbrev, dbar, ...
                        Mbar, ...
                        uXt, uYt, uZt, ...
                        g, dirg, ...
                        Kbar11, Dbar11, dynamic, ...
                        maskSADof, maskBDof, maskCDof, ...
                        indexSADof, indexBDof, indexCDof, ...
                        dtsample, tspan); 
toc  
% % Store T and X, and deformed configurations
% save('Time.txt','T','-ascii')
% save('DeformedConfig_Velocity.txt','X','-ascii')

%% Outputs
% deformed state of connected structure after dynamic analysis
% obtain displacement and velocity
[qbar1, qbar2, P, varTheta, ...
 qbar1dot, qbar2dot, Pdot, varThetadot, ...
 qbar1ddot, qbar2ddot, Pddot, varThetaddot, Fc] = ...
            Template2StructureDynamicsOutputs(T, X, Xp, ...
                                                RJ_SA, RJ_B, ...
                                                x01_C, RE1_C, r1_C, ...
                                                x02_C, RE2_C, r2_C, ...
                                                Rb10, Rb20, ...
                                                N, Nbrev, ...
                                                maskSADof, maskBDof, ...
                                                indexSADof, indexBDof, ...
                                                P0, R0, II_C, ...
                                                rho, EA, EI, GJ, ...
                                                betAX, betBEND, betTOR, ...
                                                sg, wg, nel, ...
                                                colmat, colmat_brev, ...
                                                colmat_bar, ...
                                                d, dbrev, dbar, ...
                                                Mbar, ...
                                                u, ...
                                                Kbar11, Dbar11);

% plot x and y displacement of the top of surge arrester 
figure(103),
    plot(T, P(1,:));        
    grid on, 
    xlabel('Time (sec)')
    ylabel('x_{SA} (in)')
    title('x displacment of surge arrester top (in)')
figure(104),
    plot(T, P(2,:));        
    grid on, 
    xlabel('Time (sec)')
    ylabel('y_{SA} (in)')
    title('y displacment of surge arrester top (in)')
% plot x, y and z displacement of the top of bushing
figure(105),
    plot(T, P(end-2,:));        
    grid on, 
    xlabel('Time (sec)')
    ylabel('x_{B} (in)')
    title('x displacment of bushing top (in)')
figure(106),
    plot(T, P(end-1,:));
    grid on, 
    xlabel('Time (sec)')
    ylabel('y_{B} (in)')
    title('y displacment of bushing top (in)')
figure(107),
    plot(T, P(end,:));
    grid on, 
    xlabel('Time (sec)')
    ylabel('z_{B} (in)')
    title('z displacment of bushing top (in)')

% obtain axial strain and curvatures for conductor
[eps, eps_projected, kappa, Curv0, Curv] ...
                         = CableStrains(P0, P, varTheta, ...
                                        colmat, colmat_brev, colmat_bar,...
                                        nel, wg, Mbar, dbar, R0, dynamic);

% figure(1000)
% QuickAndDirtyAnimation(P(:,1),P(:,1:10:end)-P(:,1),x0_SA,x0_B,knots,...
%                        1,[1 1 1],gca,'Seismic response');

%% Linear dynamic analysis
fprintf('Linear dynamic analysis of connected structure ...\n');
linsys = ss(AA, BB, CC, DD);
U = [uXt uYt uZt];
Tlin = (0:length(U)-1)'*dtsample;
tic 
Xlin = lsim(linsys, U, Tlin);
Xplin = Xlin*AA' + U*BB'; % The transpose is because of the row-wise
                          % arrangement of Xlin and U
toc
Ndof = size(X,2)/2;
figure, 
    plot(T, X(:,1), Tlin, Xlin(:,1)), 
    grid on,
    title('Comparing X(1) between nonlinear and linear analysis')
    
figure,
    plot(T, Xp(:,Ndof+1), Tlin, Xplin(:,Ndof+1)),
    grid on,
    title('Comparing first comp. of accel. between linear and nonlinear');
    
%% 
rmpath ..