function [Jacx, Jacxp, Jacx_FD, Jacxp_FD] = ...
    CheckTemplate2StructureDynamicsJacobian(di_S1, phii_S1, ...
                        ddi_S1, phidi_S1, dddi_S1, phiddi_S1, ...
                        di_S2, phii_S2, ...
                        ddi_S2, phidi_S2, dddi_S2, phiddi_S2, ...
                        gamma1i, gamma2i, ...
                        Pmidi, varThetamidi, ...
                        gamma1doti, gamma2doti, ...
                        Pmiddoti, varThetamiddoti, ...
                        gamma1ddoti, gamma2ddoti, ...
                        Pmidddoti, varThetamidddoti, ...
                        m_S1, II_S1, KT_S1, CT_S1, KR_S1, CR_S1, r_S1, ...
                        RJ_S1, ...
                        m_S2, II_S2, KT_S2, CT_S2, KR_S2, CR_S2, r_S2, ...
                        RJ_S2, ...
                        P0, ...
                        x01_C, RE1_C, r1_C, ...
                        x02_C, RE2_C, r2_C, ...
                        R0, II_C, ...
                        rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                        sg, wg, nel, ...
                        colmat, colmat_brev, colmat_bar, ...
                        d, dbrev, dbar, ...
                        Mbar, ...
                        uXt, uYt, uZt, ...
                        g, dirg, ...
                        Kbar11, Dbar11, dynamic, ...
                        maskS1Dof, maskS2Dof, maskCDof, ...
                        indexS1Dof, indexS2Dof, indexCDof, ...
                        dtsample) 

% Check Jacobian matrices in dynamic analysis of assembled structure

% Inputs
% (di_S1, phii_S1, ddi_S1, phidi_S1, ...
%       dddi_S1, phiddi_S1) = initial conditions (structure 1)
% (di_S2, phii_S2, ddi_S2, phidi_S2, ...
%       dddi_S2, phiddi_S2) = initial conditions (structure 2)
% (gamma1i ... varThetamidddoti) = initial conditions (conductor)
% m_S1 ... RJ_S1 = inputs for RigidBodyForce (structure 1)
% m_S2 ... RJ_S2 = inputs for RigidBodyForce (structure 2)
% P0 ... dynamic = inputs for CableForceRotBCinCoord (conductor)
% maskS1Dof ... indexCDof = assembly parameters
% dtsample = sampling time of input ground accelerations
% OUTPUTS
% Jacx, Jacxp - Jacobian matrices calculated in 
%                   SolveTemplate2StructureDynamics
% Jacx_FD, Jacxp_FD - Jacobian matrices calculated from Finite Difference 

% number of basis functions (or control points)
N = size(colmat,2);
Nbrev = size(colmat_brev,2);

% total number of Dofs
JADof = length(indexS1Dof) + length(indexS2Dof); %JADof: Joints Active Dof
NDof = 3*N-12+Nbrev+JADof;

% define initial Dofs associated to Joints 1 and 2 
Ji_1 = [di_S1; phii_S1];
Ji_2 = [di_S2; phii_S2];
Jdi_1 = [ddi_S1; phidi_S1];
Jdi_2 = [ddi_S2; phidi_S2];
Jddi_1 = [dddi_S1; phiddi_S1];
Jddi_2 = [dddi_S2; phiddi_S2];

% Identity matrix that forms the first block of the mass matrix
Imass = eye(NDof);

% first block row of the jacobian matrix
jacxrow1 = [zeros(NDof) -eye(NDof)];

x0 = [Ji_1(maskS1Dof); Ji_2(maskS2Dof); ...
      gamma1i; gamma2i; ...
      reshape(Pmidi,3*(N-4),1); varThetamidi; ...
      Jdi_1(maskS1Dof); Jdi_2(maskS2Dof); ... 
      gamma1doti; gamma2doti; ... 
      reshape(Pmiddoti,3*(N-4),1); varThetamiddoti];
xp0 = [Jdi_1(maskS1Dof); Jdi_2(maskS2Dof); ... 
       gamma1doti; gamma2doti; ...
       reshape(Pmiddoti,3*(N-4),1); varThetamiddoti; ...
       Jddi_1(maskS1Dof); Jddi_2(maskS2Dof); ... 
       gamma1ddoti; gamma2ddoti; ...
       reshape(Pmidddoti,3*(N-4),1); varThetamidddoti];

res0 = odefun(0, x0, xp0);
[Jacx, Jacxp] = jacobian(0, x0, xp0);
k = length(x0);
Jacx_FD = zeros(k);
Jacxp_FD = zeros(k);
epsilon = 1e-6;
for kk = 1:k
    dx = zeros(k,1);
    dx(kk) = 1;
    res1 = odefun(0, x0+epsilon*dx, xp0);
    res2 = odefun(0, x0, xp0+epsilon*dx);
    Jacx_FD(:,kk) = (res1 - res0)/epsilon;
    Jacxp_FD(:,kk) = (res2 - res0)/epsilon;
end

    function res = odefun(t, x, xp) %#ok<INUSL>
        [d_S1, phi_S1, d_S2, phi_S2, gamma1, gamma2, ...
          Pmid, varThetamid, ...
          dd_S1, phid_S1, dd_S2, phid_S2, gamma1dot, gamma2dot, ...
          Pmiddot, varThetamiddot] ...
          = x2state(x, Ji_1, Ji_2, Jdi_1, Jdi_2);
        [~, ~, ~, ~, ~, ~, ...
          ~, ~, ...
          ddd_S1, phidd_S1, ddd_S2, phidd_S2, gamma1ddot, gamma2ddot, ...
          Pmidddot, varThetamidddot] ...
          = x2state(xp, Jdi_1, Jdi_2, Jddi_1, Jddi_2);

        % input ground accelerations
        n = floor(t/dtsample) + 1;
        if (n > length(uXt)-1)
            uX_ = 0;
            uY_ = 0;
            uZ_ = 0;
        else
            uX_ = uXt(n) + (uXt(n+1)-uXt(n))/dtsample*(t - (n-1)*dtsample);
            uY_ = uYt(n) + (uYt(n+1)-uYt(n))/dtsample*(t - (n-1)*dtsample);
            uZ_ = uZt(n) + (uZt(n+1)-uZt(n))/dtsample*(t - (n-1)*dtsample);
        end
        u = g*dirg(:) + [uX_; uY_; uZ_];
        
        F = zeros(NDof,1);
        F_S1 = RigidBodyForce(d_S1, phi_S1, ...
                        dd_S1, phid_S1, ddd_S1, phidd_S1, ...
                        m_S1, II_S1, KT_S1, CT_S1, KR_S1, CR_S1, r_S1, ...
                        RJ_S1, u);
        F_S2 = RigidBodyForce(d_S2, phi_S2, ...
                        dd_S2, phid_S2, ddd_S2, phidd_S2, ...
                        m_S2, II_S2, KT_S2, CT_S2, KR_S2, CR_S2, r_S2, ...
                        RJ_S2, u);
        F_C = CableForceRotBCinCoord(d_S1, phi_S1, ...
                             gamma1, ...
                             d_S2, phi_S2, ...
                             gamma2, ...
                             Pmid, varThetamid, ...
                             P0, ...
                             dd_S1, phid_S1, gamma1dot, ...
                             dd_S2, phid_S2, gamma2dot, ...
                             Pmiddot, varThetamiddot, ...
                             ddd_S1, phidd_S1, gamma1ddot, ...
                             ddd_S2, phidd_S2, gamma2ddot, ...
                             Pmidddot, varThetamidddot, ...
                             x01_C, RJ_S1, RE1_C, r1_C, ...
                             x02_C, RJ_S2, RE2_C, r2_C, ...
                             R0, II_C, ...
                             rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                             sg, wg, nel, ...
                             colmat, colmat_brev, colmat_bar, ...
                             d, dbrev, dbar, ...
                             Mbar, ...
                             u, ...
                             Kbar11, Dbar11, dynamic, 0);
        
        F(indexS1Dof) = F(indexS1Dof) + F_S1(maskS1Dof); 
        F(indexS2Dof) = F(indexS2Dof) + F_S2(maskS2Dof);                 
        F(indexCDof) = F(indexCDof) + F_C(maskCDof);
        
        res = [xp(1:NDof)-x(NDof+1:end); F];
    end

    function [Jacx, Jacxp] = jacobian(t, x, xp)
        [d_S1, phi_S1, d_S2, phi_S2, gamma1, gamma2, ...
          Pmid, varThetamid, ...
          dd_S1, phid_S1, dd_S2, phid_S2, gamma1dot, gamma2dot, ...
          Pmiddot, varThetamiddot] ...
          = x2state(x, Ji_1, Ji_2, Jdi_1, Jdi_2);
         [~, ~, ~, ~, ~, ~, ...
          ~, ~, ...
          ddd_S1, phidd_S1, ddd_S2, phidd_S2, gamma1ddot, gamma2ddot, ...
          Pmidddot, varThetamidddot] ...
          = x2state(xp, Jdi_1, Jdi_2, Jddi_1, Jddi_2);
        
        % input ground accelerations
        n = floor(t/dtsample) + 1;
        if (n > length(uXt)-1)
            uX_ = 0;
            uY_ = 0;
            uZ_ = 0;
        else
            uX_ = uXt(n) + (uXt(n+1)-uXt(n))/dtsample*(t - (n-1)*dtsample);
            uY_ = uYt(n) + (uYt(n+1)-uYt(n))/dtsample*(t - (n-1)*dtsample);
            uZ_ = uZt(n) + (uZt(n+1)-uZt(n))/dtsample*(t - (n-1)*dtsample);
        end
        u = g*dirg(:) + [uX_; uY_; uZ_];
        
        K = zeros(NDof);
        C = zeros(NDof);
        M = zeros(NDof);
        [~, K_S1, C_S1, M_S1] = ...
            RigidBodyForce(d_S1, phi_S1, ...
                        dd_S1, phid_S1, ddd_S1, phidd_S1, ...
                        m_S1, II_S1, KT_S1, CT_S1, KR_S1, CR_S1, r_S1, ...
                        RJ_S1, u);
        [~, K_S2, C_S2, M_S2] = ...
            RigidBodyForce(d_S2, phi_S2, ...
                        dd_S2, phid_S2, ddd_S2, phidd_S2, ...
                        m_S2, II_S2, KT_S2, CT_S2, KR_S2, CR_S2, r_S2, ...
                        RJ_S2, u);
        [~, K_C, C_C, M_C] = ...
            CableForceRotBCinCoord(d_S1, phi_S1, ...
                             gamma1, ...
                             d_S2, phi_S2, ...
                             gamma2, ...
                             Pmid, varThetamid, ...
                             P0, ...
                             dd_S1, phid_S1, gamma1dot, ...
                             dd_S2, phid_S2, gamma2dot, ...
                             Pmiddot, varThetamiddot, ...
                             ddd_S1, phidd_S1, gamma1ddot, ...
                             ddd_S2, phidd_S2, gamma2ddot, ...
                             Pmidddot, varThetamidddot, ...
                             x01_C, RJ_S1, RE1_C, r1_C, ...
                             x02_C, RJ_S2, RE2_C, r2_C, ...
                             R0, II_C, ...
                             rho, EA, EI, GJ, betAX, betBEND, betTOR, ...
                             sg, wg, nel, ...
                             colmat, colmat_brev, colmat_bar, ...
                             d, dbrev, dbar, ...
                             Mbar, ...
                             u, ...
                             Kbar11, Dbar11, dynamic, 0);
                         
        K(indexS1Dof,indexS1Dof) = K(indexS1Dof,indexS1Dof) + ...
                                K_S1(maskS1Dof,maskS1Dof);
        K(indexS2Dof,indexS2Dof) = K(indexS2Dof,indexS2Dof) + ...
                                K_S2(maskS2Dof,maskS2Dof);
        K(indexCDof,indexCDof) = K(indexCDof,indexCDof) + ...
                                K_C(maskCDof,maskCDof);
        C(indexS1Dof,indexS1Dof) = C(indexS1Dof,indexS1Dof) + ...
                                C_S1(maskS1Dof,maskS1Dof);
        C(indexS2Dof,indexS2Dof) = C(indexS2Dof,indexS2Dof) + ...
                                C_S2(maskS2Dof,maskS2Dof);
        C(indexCDof,indexCDof) = C(indexCDof,indexCDof) + ...
                                C_C(maskCDof,maskCDof);
        M(indexS1Dof,indexS1Dof) = M(indexS1Dof,indexS1Dof) + ...
                                M_S1(maskS1Dof,maskS1Dof);
        M(indexS2Dof,indexS2Dof) = M(indexS2Dof,indexS2Dof) + ...
                                M_S2(maskS2Dof,maskS2Dof);
        M(indexCDof,indexCDof) = M(indexCDof,indexCDof) + ...
                                M_C(maskCDof,maskCDof);
        
        Jacx = [jacxrow1; K C]; 
        Jacxp = blkdiag(Imass,M);
    end

    function [d_S1__, phi_S1__, d_S2__, phi_S2__, ...
              gamma1__, gamma2__, ...
              Pmid__, varThetamid__, ...
              dd_S1__, phid_S1__, dd_S2__, phid_S2__, ...
              gamma1dot__, gamma2dot__, ...
              Pmiddot__, varThetamiddot__] ...
              = x2state(x, Ji_1, Ji_2, Jdi_1, Jdi_2)
        J1__ = Ji_1;
        J1__(maskS1Dof) = x(indexS1Dof);
        [d_S1__, phi_S1__] = deal(J1__(1:3), J1__(4:6));
        J2__ = Ji_2;
        J2__(maskS2Dof) = x(indexS2Dof);
        [d_S2__, phi_S2__] = deal(J2__(1:3), J2__(4:6));
        gamma1__ = x(JADof+1);
        gamma2__ = x(JADof+2);
        Pmid__ = reshape(x(JADof+3:JADof+2+3*(N-4)),3,N-4);
        varThetamid__ = x(JADof+2+3*(N-4)+(1:Nbrev-2));
        J1d__ = Jdi_1;
        J1d__(maskS1Dof) = x(NDof+indexS1Dof);
        [dd_S1__, phid_S1__] = deal(J1d__(1:3), J1d__(4:6));
        J2d__ = Jdi_2;
        J2d__(maskS2Dof) = x(NDof+indexS2Dof);
        [dd_S2__, phid_S2__] = deal(J2d__(1:3), J2d__(4:6));
        gamma1dot__ = x(NDof+JADof+1);
        gamma2dot__ = x(NDof+JADof+2);
        Pmiddot__ = reshape(x(NDof+JADof+3:NDof+JADof+2+3*(N-4)),3,N-4);
        varThetamiddot__ = x(NDof+JADof+2+3*(N-4)+(1:Nbrev-2));
    end

end